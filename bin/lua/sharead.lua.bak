function loadfiles()	local fnc, err = loadfile("..\\temp\\hash.lua")	if err then print(err) return nil end	os.remove("..\\temp\\hash.lua")	return fnc()endfunction correctpath(oldpath, paths)	if paths then		for index, path in pairs(paths) do			if type(index)=="number" and index>=1 then				if string.sub(path,1,1)==[["]] and string.sub(path,-1,-1)==[["]] then					path=string.sub(path,2,-2)				end				if path:len()>0 then					print("path: "..path)					local startidx,endidx = string.find(oldpath,path,1,true)					if startidx then						print("find path: "..oldpath)						local ok,_,lastdir = string.find(path,"([^\\]+)$")						if ok then							local newpath=lastdir..string.sub(oldpath,endidx+1)							print("new path:"..newpath)							return newpath						end						break					end				end			end		end		print("no find what correct")		return oldpath	else		print("paths nil")		return oldpath	endendfunction checkdata(data)	if type(data)=="table" then 		if next(data) then			return "table"		else			return nil		end	elseif (type(data)=="string" and (data~="")) then		return "string"	else		return nil	endendfunction checkhave(hash)	local hw = 	{		bUrl	= checkdata(hash.url),		-- Direct url(s) to file		bPUrl	= checkdata(hash.purl),		-- Page url(s) where file can be downloaded		bP2Purl	= checkdata(hash.p2purl),	-- P2P url(s) (Gnetella, EDonkey, DC)		bSha1	= checkdata(hash.sha1),		-- Sha1 hash of file		bTTH	= checkdata(hash.tth),		-- Tiger Tree Hash of file		bEd2k	= checkdata(hash.ed2k),		-- Edonkey hash of file		bAich	= checkdata(hash.aich),		bMd5	= checkdata(hash.md5),		bCrc32	= checkdata(hash.crc32),		bTiger	= checkdata(hash.tiger),		bKZhash	= checkdata(hash.kzhash),		bBtih	= checkdata(hash.btih),		bUuid	= checkdata(hash.uuid),		bTags	= checkdata(hash.tags)	}	hw.bHashed	= hw.bSha1 or hw.bTTH or 				hw.bEd2k or hw.bAich or 				hw.bMd5 or hw.bCrc32 or 				hw.bTiger or hw.bKZhash or 				hw.bBtih	return hwendfunction urlstomagnet(amp, prefix,urls)		local rez=""		local function add(url)			rez=rez..amp..prefix..wtoutf8url(url)		end		local function wtoutf8url(url)			if string.sub(url,1,5)=="dchub" then				return url			else				return wintoutf8url(url)			end		end		--start--		if type(urls)=="string" then --one url			add(urls)		elseif type(urls)=="table" then --many urls			for idx, urldata in pairs(urls) do				add(urldata)				if amp=="" then amp="&" end			end		end		return rezendfunction join(tbl, fnc, ...)	if type(tbl)=="string" then --one url		fnc(tbl, ...)	elseif type(tbl)=="table" then --many urls		for key, value in pairs(tbl) do			fnc(value, ...)		end	endendfunction magnet(fileinfo, havetbl, tthfirst)	local sLink="magnet:?"	function amp()		if string.len(sLink)>8 then 			return "&" 		else 			return "" 		end	end	function add(text)		sLink=sLink..amp()..text	end	function addurl(url, prefix)			end	if tthfirst then		if havetbl.bTTH		then add( "xt=urn:tree:tiger:" .. fileinfo.tth )	end		if fileinfo.size	then add( "xl=" .. fileinfo.size ) 					end		if fileinfo.name	then add( "dn=" .. wintoutf8url( fileinfo.name ) )	end		if havetbl.bEd2k	then add( "xt=urn:ed2k:" .. fileinfo.ed2k )			end	else		if havetbl.bEd2k	then add( "xt=urn:ed2k:" .. fileinfo.ed2k )			end		if fileinfo.size	then add( "xl=" .. fileinfo.size )					end		if fileinfo.name	then add( "dn=" .. wintoutf8url( fileinfo.name ) )	end	end	if havetbl.bSha1 and havetbl.bTTH and (tthfirst == nil or tthfirst == false) then		add("xt=urn:bitprint:" .. fileinfo.sha1 .. "." .. fileinfo.tth)	else		if havetbl.bSha1 then add( "xt=urn:sha1:" .. fileinfo.sha1 ) end		if havetbl.bTTH and ( tthfirst == nil or tthfirst == false ) then 			add("xt=urn:tree:tiger:" .. fileinfo.tth) 		end	end		if havetbl.bAich 	then 	add("xt=urn:aich:"..fileinfo.aich) 		end	if havetbl.bBtih 	then 	add("xt=urn:btih:"..fileinfo.btih) 		end	if havetbl.bKZhash 	then	add("xt=urn:kzhash:"..fileinfo.kzhash) 	end	if havetbl.bMd5 	then 	add("xt=urn:md5:"..fileinfo.md5) 		end	if havetbl.bTiger 	then 	add("xt=urn:tiger:"..fileinfo.tiger) 	end	if havetbl.bCrc32 	then 	add("xt=urn:crc32:"..fileinfo.crc32) 	end	if havetbl.bUuid 	then 	add("xt=urn:uuid:"..fileinfo.uuid) 		end	if havetbl.bUrl 	then 	join(fileinfo.url, addurl, "as=") 		end	if havetbl.bP2Purl 	then 	join(fileinfo.p2purl, addurl, "xs=")	end	return sLinkend--ed2k://|file|Shareaza_2.4.0.0.exe|6745696|aa52fb210465bddd679d6853b491ccce|/function ed2klink(fileinfo, havetbl)	local sLink=""	local function add(url, prefix, suffix)		sLink = sLink .. prefix .. wintoutf8url(url) .. suffix	end		if havetbl.bEd2k then		local sLink="ed2k://|file|"..wintoutf8url(fileinfo.name).."|"..fileinfo.size.."|"..fileinfo.ed2k.."|"		if havetbl.bAich then			sLink=sLink.."h="..fileinfo.aich.."|"		end		if havetbl.bUrl then			join(fileinfo.url, add, "s=", "|")		end		return sLink.."/"	endendfunction urlstoxml(urls, startpart, endpart)	local rez=""	if type(urls)=="string" then		rez=rez..startpart..wintoutf8ru(escapexml(urls))..endpart	elseif type(urls)=="table" then		for idx, urldata in pairs(urls) do			if type(urldata)=="string" and urldata~="" then				rez=rez..startpart..wintoutf8ru(escapexml(urldata))..endpart			end		end	end	return rezendfunction tagstoxml(tags)	local rez=""	for idx, tagdata in pairs(tags) do		rez=rez.."\n<tag name=\""..wintoutf8ru(escapexml(tagdata["name"])).."\" "		if string.find(tagdata["text"],"\n") then			rez=rez..">\n"..wintoutf8ru(escapexml(tagdata["text"])).."\n</tag>"		else			rez=rez.."text=\""..wintoutf8ru(escapexml(tagdata["text"])).."\" />"		end	end	return rezendfunction filelist(fileinfo, havetbl)	local sListItem="<File Name=\""..wintoutf8ru(escapexml(fileinfo.name)).."\" Size=\""..fileinfo.size.."\""	if havetbl.bTTH  then sListItem=sListItem.." TTH=\""..fileinfo.tth.."\"" end	if havetbl.bSha1  then sListItem=sListItem.." SHA1=\""..fileinfo.sha1.."\"" end	if havetbl.bEd2k  then sListItem=sListItem.." ED2K=\""..fileinfo.ed2k.."\"" end	if havetbl.bMd5 then sListItem=sListItem.." MD5=\""..fileinfo.md5.."\"" end	if havetbl.bKZhash then sListItem=sListItem.." KZH=\""..fileinfo.kzhash.."\"" end	if havetbl.bBtih then sListItem=sListItem.." BTIH=\""..fileinfo.btih.."\"" end	if havetbl.bAich then sListItem=sListItem.." AICH=\""..fileinfo.aich.."\"" end	if havetbl.bTiger then sListItem=sListItem.." TIGER=\""..fileinfo.tiger.."\"" end	if havetbl.bCrc32 then sListItem=sListItem.." CRC32=\""..fileinfo.crc32.."\"" end	if havetbl.bUrl or havetbl.bP2Purl then		sListItem=sListItem.." >"		if havetbl.bUrl then sListItem=sListItem..urlstoxml(fileinfo.url,"\n<url address=\"","\" />") end		if havetbl.bP2Purl then sListItem=sListItem..urlstoxml(fileinfo.p2purl,"\n<p2purl address=\"","\" />") end		if havetbl.bTags then sListItem=sListItem..tagstoxml(fileinfo.tags) end		sListItem=sListItem.."\n</File>"	else		sListItem=sListItem.." />"	end	return sListItemendfunction tagstotext(tags)	local rez=""	for idx, tagdata in pairs(tags) do		rez=rez.."\nTAG: \""..tagdata["name"].."\"\n\t"		rez=rez..string.gsub(tagdata["text"], "(\n)", function()			return "\n\t"		end).."\n"	end	return rezendfunction hashtext(fileinfo, havetbl)	local hashtext="FILE NAME: "..fileinfo.name.."\nFILE SIZE: "..fileinfo.size.."\n"	if havetbl.bCrc32  then hashtext=hashtext.."URN:CRC32: "..fileinfo.crc32.."\n" end	if havetbl.bEd2k  then hashtext=hashtext.."URN:ED2K: "..fileinfo.ed2k.."\n" end	if havetbl.bAich then hashtext=hashtext.."URN:AICH: "..fileinfo.aich.."\n" end	if havetbl.bMd5 then hashtext=hashtext.."URN:MD5: "..fileinfo.md5.."\n" end	if havetbl.bKZhash then hashtext=hashtext.."URN:KZH: "..fileinfo.kzhash.."\n" end	if havetbl.bBtih then hashtext=hashtext.."URN:BTIH: "..fileinfo.btih.."\n" end	if havetbl.bSha1  then hashtext=hashtext.."URN:SHA1: "..fileinfo.sha1.."\n" end	if havetbl.bTTH  then hashtext=hashtext.."URN:TREE:TIGER: "..fileinfo.tth.."\n" end	if havetbl.bTiger  then hashtext=hashtext.."URN:TIGER: "..fileinfo.tiger.."\n" end	if havetbl.bUrl then hashtext=hashtext..urlstoxml(fileinfo.url,"URL: ", "\n") end	if havetbl.bP2Purl then hashtext=hashtext..urlstoxml(fileinfo.p2purl,"P2PURL: ","\n") end	if havetbl.bP2Purl then hashtext=hashtext..urlstoxml(fileinfo.purl,"PURL: ","\n") end	if havetbl.bTags then hashtext=hashtext..tagstotext(fileinfo.tags) end	return hashtextendfunction splitpath(path)	--print(path)	names={}	string.gsub(path, "([^\\]+)", function(dirname) 		table.insert(names,dirname)		--print(dirname)	end)	return namesendfunction getfirst(vort)	return (type(vort)=="table" and vort[1]) or (type(vort)=="string" and vort)endfunction findN2Rlink(links)	if type(links)=="string" then		if string.find(links, "%/(uri%-res%/N2R)%?") then			return links		end	elseif type(links)=="table" then		for k,v in pairs(links) do			if string.find(v, "%/(uri%-res%/N2R)%?") then				return v			end		end	end	end